{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func lazy() = {
    let a = {
        let b = 4 # Not evaluated
        true
    }
    a
}

func eager() = {
    let a = {
        strict b = 4 # Evaluated
        true
    }
    let c = {
        strict d = 8 # Not evaluated
        true
    }
    a
}

func lazyOrder() = {
    let balanceBefore = wavesBalance(this).regular
    let result = invoke(this, "foo",nil,[AttachedPayment(unit,100000000)])
    let balanceAfter = wavesBalance(this).regular
    if (balanceAfter == balanceBefore) 
        then throw("What") # no foo invoke
        else throw("Ok")
}

func strictOrder() = {
    strict balanceBefore = wavesBalance(this).regular
    strict result = invoke(this, "foo",nil,[AttachedPayment(unit,100000000)])
    strict balanceAfter = wavesBalance(this).regular
    if (balanceAfter < balanceBefore) 
        then throw("Ok") # ok
        else throw("What")
}

let boolTrue = true
let boolFalse = false
let intMin = -9223372036854775808
let intMax = 9223372036854775807
let bigInt = toBigInt(8)
let string = "abc"
let emptyString = ""
let null = unit
let byteVector16 = base16'52696465'
let byteVector58 = base58'8t38fWQhrYJsqxXtPpiRCEk1g5RJdq9bG5Rkr2N7mDFC'
let byteVector64 = base64'UmlkZQ=='
let list = [1, 2]
let tuple = (1, "hello")
let listWithUnion = [1, "Waves"]